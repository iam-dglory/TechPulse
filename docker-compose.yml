version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: texhpulze-postgres
    environment:
      POSTGRES_DB: texhpulze_dev
      POSTGRES_USER: texhpulze
      POSTGRES_PASSWORD: texhpulze_dev_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - texhpulze-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U texhpulze -d texhpulze_dev"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: texhpulze-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - texhpulze-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    command: redis-server --appendonly yes --requirepass redis_dev_password

  # Backend API
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: texhpulze-api
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://texhpulze:texhpulze_dev_password@postgres:5432/texhpulze_dev
      REDIS_URL: redis://:redis_dev_password@redis:6379
      JWT_SECRET: dev-jwt-secret-key-change-in-production
      PORT: 5000
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      FRONTEND_URL: http://localhost:3000
      API_BASE_URL: http://localhost:5000
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - texhpulze-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    command: npm run dev:ts:watch

  # Background Worker
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: texhpulze-worker
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://texhpulze:texhpulze_dev_password@postgres:5432/texhpulze_dev
      REDIS_URL: redis://:redis_dev_password@redis:6379
      JWT_SECRET: dev-jwt-secret-key-change-in-production
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - texhpulze-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run worker:watch

  # Frontend (Optional - if you have a React frontend)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: texhpulze-frontend
    environment:
      REACT_APP_API_URL: http://localhost:5000
      REACT_APP_ENVIRONMENT: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - texhpulze-network
    depends_on:
      - api
    restart: unless-stopped
    profiles:
      - frontend

  # Adminer (Database Management UI)
  adminer:
    image: adminer:4.8.1
    container_name: texhpulze-adminer
    ports:
      - "8080:8080"
    networks:
      - texhpulze-network
    depends_on:
      - postgres
    profiles:
      - tools

  # Redis Commander (Redis Management UI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: texhpulze-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis_dev_password
    ports:
      - "8081:8081"
    networks:
      - texhpulze-network
    depends_on:
      - redis
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  texhpulze-network:
    driver: bridge